// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name BridgewellSDK
import AdSupport
import AppTrackingTransparency
@_exported import BridgewellSDK
import CoreLocation
import CoreTelephony
import DeveloperToolsSupport
import Foundation
import Network
import PrebidMobile
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public protocol BwsAdViewDelegate : ObjectiveC.NSObjectProtocol {
  @objc func adViewPresentationController() -> UIKit.UIViewController?
  @objc optional func adViewDisplayed(_ adView: BridgewellSDK.BwsAdView)
  @objc optional func adViewFailed(_ adView: BridgewellSDK.BwsAdView, didFailToReceiveAdWith error: any Swift.Error)
  @objc optional func adViewClicked(_ adView: BridgewellSDK.BwsAdView)
  @objc optional func adViewClosed(_ adView: BridgewellSDK.BwsAdView)
  @objc optional func adViewDidDismissModal(_ adView: BridgewellSDK.BwsAdView)
  @objc optional func adViewRedirect(_ adView: BridgewellSDK.BwsAdView, openUrl: Swift.String, useInAppBrowser: Swift.Bool)
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class BwsAdView : UIKit.UIView, PrebidMobile.BannerViewDelegate {
  @_Concurrency.MainActor(unsafe) public var adUnitConfig: PrebidMobile.AdUnitConfig {
    get
  }
  @_Concurrency.MainActor(unsafe) public var eventHandler: (any PrebidMobile.BannerEventHandler)? {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var bannerParameters: PrebidMobile.BannerParameters {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var videoParameters: PrebidMobile.VideoParameters {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var lastBidResponse: PrebidMobile.BidResponse? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var configID: Swift.String {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var refreshInterval: Foundation.TimeInterval {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var additionalSizes: [CoreFoundation.CGSize]? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var adFormat: BridgewellSDK.Bridgewell.AdFormat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var adPosition: BridgewellSDK.Bridgewell.AdPosition {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var ortbConfig: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: (any BridgewellSDK.BwsAdViewDelegate)? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var redirectJsCallback: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) convenience public init(frame: CoreFoundation.CGRect, configID: Swift.String, adSize: CoreFoundation.CGSize, eventHandler: any PrebidMobile.BannerEventHandler)
  @objc @_Concurrency.MainActor(unsafe) convenience public init(configID: Swift.String, eventHandler: any PrebidMobile.BannerEventHandler)
  @objc deinit
  @objc @_Concurrency.MainActor(unsafe) public func loadAd()
  @objc @_Concurrency.MainActor(unsafe) public func setStoredAuctionResponse(storedAuction: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) public func stopRefresh()
  @objc @_Concurrency.MainActor(unsafe) public func addExtData(key: Swift.String, value: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) public func updateExtData(key: Swift.String, value: Swift.Set<Swift.String>)
  @objc @_Concurrency.MainActor(unsafe) public func removeExtData(forKey: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) public func clearExtData()
  @objc @_Concurrency.MainActor(unsafe) public func addExtKeyword(_ newElement: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) public func addExtKeywords(_ newElements: Swift.Set<Swift.String>)
  @objc @_Concurrency.MainActor(unsafe) public func removeExtKeyword(_ element: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) public func clearExtKeywords()
  @objc @_Concurrency.MainActor(unsafe) public func setAppContent(_ appContent: PrebidMobile.PBMORTBAppContent)
  @objc @_Concurrency.MainActor(unsafe) public func clearAppContent()
  @objc @_Concurrency.MainActor(unsafe) public func addAppContentData(_ dataObjects: [PrebidMobile.PBMORTBContentData])
  @objc @_Concurrency.MainActor(unsafe) public func removeAppContentDataObject(_ dataObject: PrebidMobile.PBMORTBContentData)
  @objc @_Concurrency.MainActor(unsafe) public func clearAppContentDataObjects()
  @objc @_Concurrency.MainActor(unsafe) public func addUserData(_ userDataObjects: [PrebidMobile.PBMORTBContentData])
  @objc @_Concurrency.MainActor(unsafe) public func removeUserData(_ userDataObject: PrebidMobile.PBMORTBContentData)
  @objc @_Concurrency.MainActor(unsafe) public func clearUserData()
  @_Concurrency.MainActor(unsafe) @objc public func bannerViewPresentationController() -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) @objc public func bannerView(_ bannerView: PrebidMobile.BannerView, didReceiveAdWithAdSize adSize: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc public func bannerView(_ bannerView: PrebidMobile.BannerView, didFailToReceiveAdWith error: any Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc public func bannerViewWillLeaveApplication(_ bannerView: PrebidMobile.BannerView)
  @_Concurrency.MainActor(unsafe) @objc public func bannerViewWillPresentModal(_ bannerView: PrebidMobile.BannerView)
  @_Concurrency.MainActor(unsafe) @objc public func bannerViewDidDismissModal(_ bannerView: PrebidMobile.BannerView)
}
extension BridgewellSDK.BwsAdView : WebKit.WKUIDelegate, WebKit.WKNavigationDelegate, WebKit.WKScriptMessageHandler {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class BwsBannerAd : BridgewellSDK.BwsAdView {
  @objc @_Concurrency.MainActor(unsafe) convenience public init(frame: CoreFoundation.CGRect, configID: Swift.String, adSize: CoreFoundation.CGSize, throttleTimeSeconds: Swift.Int = 30)
  @_Concurrency.MainActor(unsafe) @objc override public func loadAd()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class BwsPopupAd : BridgewellSDK.BwsAdView {
  @objc @_Concurrency.MainActor(unsafe) convenience public init(configID: Swift.String, from vc: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) @objc override public func loadAd()
  @_Concurrency.MainActor(unsafe) public static func canLoadAdView(_ configID: Swift.String) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class BwsRightSideStickyAd : BridgewellSDK.BwsAdView {
  @_Concurrency.MainActor(unsafe) public static var containerSize: CoreFoundation.CGSize {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) convenience public init(configID: Swift.String, from: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) @objc override public func loadAd()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class BwsMobileStickyAd : BridgewellSDK.BwsAdView {
  @objc @_Concurrency.MainActor(unsafe) convenience public init(configID: Swift.String, bottomMargin: CoreFoundation.CGFloat, from vc: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) @objc override public func loadAd()
  @objc deinit
}
public typealias BwsImageHelper = BridgewellSDK.Bridgewell.ImageHelper
public typealias BwsAdUnit = BridgewellSDK.Bridgewell.BridgewellAdUnit
public class BridgewellVisibilityCheckerUtils {
  public var enableVisibilityChecks: Swift.Bool
  public init()
  public func meetsVisibilityThreshold(targetView: UIKit.UIView, acceptancePercentage: Swift.Int) -> Swift.Bool
  public func startVisibilityChecksWithInterval(targetView: UIKit.UIView, acceptancePercentage: Swift.Int, intervalMillis: Swift.Double)
  public func visibilityPercentage(targetView: UIKit.UIView) -> Swift.Int
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class BridgewellViewExposureChecker : ObjectiveC.NSObject {
  public static func exposureOf(_ view: UIKit.UIView) -> BridgewellSDK.BridgewellViewExposure?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class BridgewellViewExposure : ObjectiveC.NSObject {
  public var exposedPercentage: CoreFoundation.CGFloat {
    get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class Bridgewell : ObjectiveC.NSObject {
  @objc public var updatedTimeout: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var bridgewellServerAccountId: Swift.String {
    @objc get
    @objc set
  }
  @objc public var bwPbsDebug: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var customRequestHeaders: [Swift.String : Swift.String] {
    @objc get
    @objc set
  }
  @objc public var cachedBidResponses: [Swift.String : Swift.String] {
    @objc get
    @objc set
  }
  @objc public var shouldAssignNativeAssetID: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var shareGeocoordinate: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var logLevel: PrebidMobile.LogLevel {
    @objc get
    @objc set
  }
  @objc public var enableLogging: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var externalUserIds: [PrebidMobile.ExternalUserId] {
    @objc get
    @objc set
  }
  @objc public static let shared: BridgewellSDK.Bridgewell
  @objc public var version: Swift.String {
    @objc get
  }
  @objc public var omsdkVersion: Swift.String {
    @objc get
  }
  @objc public var customStatusEndpoint: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var timeoutMillis: Swift.Int {
    @objc get
    @objc set
  }
  @objc public var timeoutMillisecondDynamic: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc public var cachedAuctionResponse: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var useCacheForReportWithRenderingAPI: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var creativeTimeout: Foundation.TimeInterval {
    @objc get
    @objc set
  }
  @objc public var creativeTimeoutPreRenderContent: Foundation.TimeInterval {
    @objc get
    @objc set
  }
  @objc public var useExternalClickThroughBrowser: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var implementedClickbrowserType: PrebidMobile.ClickbrowserType {
    @objc get
    @objc set
  }
  @objc public var debugLogFileEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var isLocationUpdatesEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var isIncludeWinners: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var isIncludeBidderKeys: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public func setCustomBridgewellServer(url: Swift.String) throws
  @objc public func addStoredBidResponse(bidder: Swift.String, responseId: Swift.String)
  @objc public func clearStoredBidResponses()
  @objc public func getStoredBidResponses() -> [[Swift.String : Swift.String]]?
  @objc public func addCustomHeader(name: Swift.String, value: Swift.String)
  @objc public func clearCustomHeaders()
  @objc public static func initializeSDK(_ gadMobileAdsObject: Swift.AnyObject? = nil, _ completion: BridgewellSDK.Bridgewell.BridgewellInitializationCallback? = nil)
  @objc public static func initializeSDK(gadMobileAdsVersion: Swift.String? = nil, _ completion: BridgewellSDK.Bridgewell.BridgewellInitializationCallback? = nil)
  @objc public static func initializeSDK(_ completion: BridgewellSDK.Bridgewell.BridgewellInitializationCallback? = nil)
  @objc public func registerContentWebViewWithAdInfo(_ webview: WebKit.WKWebView, completion: @escaping BridgewellSDK.Bridgewell.BridgewellRegisterWebviewCallback)
  public typealias InterstitialAdUnitDelegate = PrebidMobile.InterstitialAdUnitDelegate
  public typealias InterstitialRenderingAdUnit = PrebidMobile.InterstitialRenderingAdUnit
  public typealias NativeRequest = PrebidMobile.NativeRequest
  public typealias NativeAd = PrebidMobile.NativeAd
  public typealias NativeAsset = PrebidMobile.NativeAsset
  public typealias NativeAssetImage = PrebidMobile.NativeAssetImage
  public typealias ImageAsset = PrebidMobile.ImageAsset
  public typealias NativeAssetTitle = PrebidMobile.NativeAssetTitle
  public typealias NativeAssetData = PrebidMobile.NativeAssetData
  public typealias NativeEventTracker = PrebidMobile.NativeEventTracker
  public typealias ContextType = PrebidMobile.ContextType
  public typealias PlacementType = PrebidMobile.PlacementType
  public typealias ContextSubType = PrebidMobile.ContextSubType
  public typealias ImageHelper = PrebidMobile.ImageHelper
  public typealias RewardedVideoAdUnit = PrebidMobile.RewardedVideoAdUnit
  public typealias InstreamVideoAdUnit = PrebidMobile.InstreamVideoAdUnit
  public typealias IMAUtils = PrebidMobile.IMAUtils
  public typealias BridgewellHost = PrebidMobile.PrebidHost
  public typealias DataAsset = PrebidMobile.DataAsset
  public typealias EventType = PrebidMobile.EventType
  public typealias EventTracking = PrebidMobile.EventTracking
  public typealias RewardedAdUnitDelegate = PrebidMobile.RewardedAdUnitDelegate
  public typealias RewardedAdUnit = PrebidMobile.RewardedAdUnit
  public typealias MediationBannerAdUnit = PrebidMobile.MediationBannerAdUnit
  public typealias MediationInterstitialAdUnit = PrebidMobile.MediationInterstitialAdUnit
  public typealias MediationNativeAdUnit = PrebidMobile.MediationNativeAdUnit
  public typealias AdViewUtils = PrebidMobile.AdViewUtils
  public typealias BannerAdUnit = PrebidMobile.BannerAdUnit
  public typealias BannerParameters = PrebidMobile.BannerParameters
  public typealias Signals = PrebidMobile.Signals
  public typealias InterstitialAdUnit = PrebidMobile.InterstitialAdUnit
  public typealias VideoParameters = PrebidMobile.VideoParameters
  public typealias NativeAdDelegate = PrebidMobile.NativeAdDelegate
  public typealias BridgewellAdUnit = PrebidMobile.PrebidAdUnit
  public typealias NativeParameters = PrebidMobile.NativeParameters
  public typealias BridgewellRequest = PrebidMobile.PrebidRequest
  public typealias Utils = PrebidMobile.Utils
  public typealias MediationRewardedAdUnit = PrebidMobile.MediationRewardedAdUnit
  public typealias LogLevel = PrebidMobile.LogLevel
  public typealias AdFormat = PrebidMobile.AdFormat
  public typealias AdPosition = PrebidMobile.AdPosition
  public typealias BridgewellInitializationCallback = PrebidMobile.PrebidInitializationCallback
  public typealias BridgewellRegisterWebviewCallback = (() -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BridgewellAdFrequencyHandler {
  public static var shared: BridgewellSDK.BridgewellAdFrequencyHandler
  @objc deinit
}
public let BridgewellLocalCacheIdKey: Swift.String
@_inheritsConvenienceInitializers @objc public class BwsConstants : ObjectiveC.NSObject {
  @objc public static let BWS_VERSION: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
